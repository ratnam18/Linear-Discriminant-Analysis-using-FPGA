// -------------------------------------------------------------
// 
// File Name: R:\code4\codegen\LDA\hdlsrc\LDA_fixpt_tb.v
// Created: 2018-11-03 02:03:32
// 
// Generated by MATLAB 9.4, MATLAB Coder 4.0 and HDL Coder 3.12
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Design base rate: 1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: LDA_fixpt_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module LDA_fixpt_tb;



  reg  clk;
  reg  reset;
  wire enb;
  wire w_0_addr;  // ufix1
  wire w_0_lastAddr;  // ufix1
  reg  check1_done;  // ufix1
  wire snkDonen;
  wire resetn;
  wire tb_enb;
  wire rdEnb;
  wire w_0_done;  // ufix1
  wire w_0_done_enb;  // ufix1
  wire ce_out;
  wire w_0;  // ufix1
  wire w_1;  // ufix1
  wire w_0_0_expected_1;  // ufix1
  wire w_0_ref;  // ufix1
  reg  w_0_testFailure;  // ufix1
  wire w_0_1_expected_1;  // ufix1
  wire w_1_ref;  // ufix1
  reg  w_1_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign w_0_lastAddr = 1'b1;



  assign snkDonen =  ~ check1_done;



  assign tb_enb = resetn & snkDonen;



  assign rdEnb = (check1_done == 1'b0 ? tb_enb :
              1'b0);



  assign w_0_done_enb = w_0_done & rdEnb;



  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (check1_done == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  assign resetn =  ~ reset;



  assign w_0_done = w_0_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (w_0_done_enb) begin
          check1_done <= w_0_done;
        end
      end
    end

  assign #2 enb = rdEnb;

  assign ce_out = enb & (rdEnb & tb_enb);



  LDA_fixpt u_LDA_fixpt (.w_0(w_0),  // ufix1
                         .w_1(w_1)  // ufix1
                         );

  // Data source for w_0_0_expected
  assign w_0_0_expected_1 = 1'b1;



  assign w_0_ref = w_0_0_expected_1;

  always @(posedge clk or posedge reset)
    begin : w_0_checker
      if (reset == 1'b1) begin
        w_0_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && w_0 !== w_0_ref) begin
          w_0_testFailure <= 1'b1;
          $display("ERROR in w_0 at time %t : Expected '%h' Actual '%h'", $time, w_0_ref, w_0);
        end
      end
    end

  // Data source for w_0_1_expected
  assign w_0_1_expected_1 = 1'b0;



  assign w_1_ref = w_0_1_expected_1;

  always @(posedge clk or posedge reset)
    begin : w_1_checker
      if (reset == 1'b1) begin
        w_1_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && w_1 !== w_1_ref) begin
          w_1_testFailure <= 1'b1;
          $display("ERROR in w_1 at time %t : Expected '%h' Actual '%h'", $time, w_1_ref, w_1);
        end
      end
    end

  assign testFailure = w_0_testFailure | w_1_testFailure;



  always @(posedge clk)
    begin : completed_msg
      if (check1_done == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // LDA_fixpt_tb

